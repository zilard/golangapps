// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || amd64p32 || arm || arm64 || mips64le || mips64p32le || mipsle || ppc64le || riscv64
// +build 386 amd64 amd64p32 arm arm64 mips64le mips64p32le mipsle ppc64le riscv64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadGen_execve returns the embedded CollectionSpec for gen_execve.
func loadGen_execve() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Gen_execveBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load gen_execve: %w", err)
	}

	return spec, err
}

// loadGen_execveObjects loads gen_execve and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*gen_execveObjects
//	*gen_execvePrograms
//	*gen_execveMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadGen_execveObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadGen_execve()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// gen_execveSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type gen_execveSpecs struct {
	gen_execveProgramSpecs
	gen_execveMapSpecs
}

// gen_execveSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type gen_execveProgramSpecs struct {
	EnterExecve *ebpf.ProgramSpec `ebpf:"enter_execve"`
}

// gen_execveMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type gen_execveMapSpecs struct {
	Events *ebpf.MapSpec `ebpf:"events"`
}

// gen_execveObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadGen_execveObjects or ebpf.CollectionSpec.LoadAndAssign.
type gen_execveObjects struct {
	gen_execvePrograms
	gen_execveMaps
}

func (o *gen_execveObjects) Close() error {
	return _Gen_execveClose(
		&o.gen_execvePrograms,
		&o.gen_execveMaps,
	)
}

// gen_execveMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadGen_execveObjects or ebpf.CollectionSpec.LoadAndAssign.
type gen_execveMaps struct {
	Events *ebpf.Map `ebpf:"events"`
}

func (m *gen_execveMaps) Close() error {
	return _Gen_execveClose(
		m.Events,
	)
}

// gen_execvePrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadGen_execveObjects or ebpf.CollectionSpec.LoadAndAssign.
type gen_execvePrograms struct {
	EnterExecve *ebpf.Program `ebpf:"enter_execve"`
}

func (p *gen_execvePrograms) Close() error {
	return _Gen_execveClose(
		p.EnterExecve,
	)
}

func _Gen_execveClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed gen_execve_bpfel.o
var _Gen_execveBytes []byte
